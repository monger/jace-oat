BEGIN_NAMESPACE_2(org, jace)

/**
 * Contains the template specialization prototypes for the template class, ElementProxy.
 *
 * This file is only for internal use of the JACE library.
 */

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JBoolean >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JBoolean >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JBoolean& JFieldProxy< ::org::jace::proxy::types::JBoolean >::operator=(const ::org::jace::proxy::types::JBoolean& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JByte >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JByte >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JByte& JFieldProxy< ::org::jace::proxy::types::JByte >::operator=(const ::org::jace::proxy::types::JByte& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JChar >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JChar >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JChar& JFieldProxy< ::org::jace::proxy::types::JChar >::operator=(const ::org::jace::proxy::types::JChar& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JShort >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JShort >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JShort& JFieldProxy< ::org::jace::proxy::types::JShort >::operator=(const ::org::jace::proxy::types::JShort& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JInt >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JInt >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JInt& JFieldProxy< ::org::jace::proxy::types::JInt >::operator=(const ::org::jace::proxy::types::JInt& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JLong >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JLong >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JLong& JFieldProxy< ::org::jace::proxy::types::JLong >::operator=(const ::org::jace::proxy::types::JLong& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JFloat >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JFloat >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JFloat& JFieldProxy< ::org::jace::proxy::types::JFloat >::operator=(const ::org::jace::proxy::types::JFloat& type);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JDouble >::JFieldProxy(jfieldID fieldID_, jvalue value, jobject parent_);

template <>
JACE_API JFieldProxy< ::org::jace::proxy::types::JDouble >::JFieldProxy(jfieldID fieldID_, jvalue value, jclass parent_);

template <>
JACE_API jace::proxy::types::JDouble& JFieldProxy< ::org::jace::proxy::types::JDouble >::operator=(const ::org::jace::proxy::types::JDouble& type);

END_NAMESPACE_2(org, jace)

