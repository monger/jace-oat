/**
 * Contains the template specialization prototypes for the template class, JMethod.
 *
 * This file is only for internal use of the JACE library.
 */

BEGIN_NAMESPACE_2(org, jace)

template <>
JACE_API ::org::jace::proxy::types::JBoolean JMethod< ::org::jace::proxy::types::JBoolean >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JBoolean JMethod< ::org::jace::proxy::types::JBoolean >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JByte JMethod< ::org::jace::proxy::types::JByte >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JByte JMethod< ::org::jace::proxy::types::JByte >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JChar JMethod< ::org::jace::proxy::types::JChar >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JChar JMethod< ::org::jace::proxy::types::JChar >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JDouble JMethod< ::org::jace::proxy::types::JDouble >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JDouble JMethod< ::org::jace::proxy::types::JDouble >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JFloat JMethod< ::org::jace::proxy::types::JFloat >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JFloat JMethod< ::org::jace::proxy::types::JFloat >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JInt JMethod< ::org::jace::proxy::types::JInt >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JInt JMethod< ::org::jace::proxy::types::JInt >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JLong JMethod< ::org::jace::proxy::types::JLong >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JLong JMethod< ::org::jace::proxy::types::JLong >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JShort JMethod< ::org::jace::proxy::types::JShort >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JShort JMethod< ::org::jace::proxy::types::JShort >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JVoid JMethod< ::org::jace::proxy::types::JVoid >::invoke(const JClass& jClass, const JArguments& arguments);

template <>
JACE_API ::org::jace::proxy::types::JVoid JMethod< ::org::jace::proxy::types::JVoid >::invoke(const ::org::jace::proxy::JObject& object, const JArguments& arguments);


END_NAMESPACE_2(org, jace)

