/**
 * Contains the definitions for the template specializations of the template class, JFieldProxy.
 *
 * This file is internal to the JACE library.
 */

BEGIN_NAMESPACE_2(org, jace)

template <> inline
JFieldProxy< ::org::jace::proxy::types::JBoolean >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JBoolean(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JBoolean >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JBoolean(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JBoolean >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JBoolean >& object):
  ::org::jace::proxy::types::JBoolean(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JBoolean& JFieldProxy< ::org::jace::proxy::types::JBoolean >::operator=(const ::org::jace::proxy::types::JBoolean& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticBooleanField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetBooleanField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JByte >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JByte(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JByte >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JByte(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JByte >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JByte >& object):
  ::org::jace::proxy::types::JByte(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JByte& JFieldProxy< ::org::jace::proxy::types::JByte >::operator=(const ::org::jace::proxy::types::JByte& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticByteField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetByteField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JChar >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent)
:
  ::org::jace::proxy::types::JChar(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JChar >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JChar(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JChar >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JChar >& object) :
  ::org::jace::proxy::types::JChar(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JChar& JFieldProxy< ::org::jace::proxy::types::JChar >::operator=(const ::org::jace::proxy::types::JChar& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticCharField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetCharField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JShort >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JShort(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JShort >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JShort(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JShort >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JShort >& object):
  ::org::jace::proxy::types::JShort(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JShort& JFieldProxy< ::org::jace::proxy::types::JShort >::operator=(const ::org::jace::proxy::types::JShort& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticShortField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetShortField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JInt >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JInt(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JInt >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JInt(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JInt >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JInt >& object):
  ::org::jace::proxy::types::JInt(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JInt& JFieldProxy< ::org::jace::proxy::types::JInt >::operator=(const ::org::jace::proxy::types::JInt& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticIntField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetIntField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JLong >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JLong(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JLong >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JLong(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JLong >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JLong >& object):
  ::org::jace::proxy::types::JLong(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JLong& JFieldProxy< ::org::jace::proxy::types::JLong >::operator=(const ::org::jace::proxy::types::JLong& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent) {
    jclass fieldClass = parentClass;
    env->SetStaticLongField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetLongField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JFloat >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JFloat(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JFloat >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JFloat(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JFloat >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JFloat >& object):
  ::org::jace::proxy::types::JFloat(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JFloat& JFieldProxy< ::org::jace::proxy::types::JFloat >::operator=(const ::org::jace::proxy::types::JFloat& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticFloatField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetFloatField(parent, fieldID, type);

  return *this;
}


template <> inline
JFieldProxy< ::org::jace::proxy::types::JDouble >::JFieldProxy(jfieldID _fieldID, jvalue value, jobject _parent):
  ::org::jace::proxy::types::JDouble(value), fieldID(_fieldID)
{
  if (_parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, _parent); 
  }
  else
    parent = _parent;
  
  parentClass = 0;
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JDouble >::JFieldProxy(jfieldID _fieldID, jvalue value, jclass _parentClass):
  ::org::jace::proxy::types::JDouble(value), fieldID(_fieldID)
{
  parent = 0;
  JNIEnv* env = attach();
  parentClass = static_cast<jclass>(newGlobalRef(env, _parentClass)); 
}

template <> inline
JFieldProxy< ::org::jace::proxy::types::JDouble >::JFieldProxy(const JFieldProxy< ::org::jace::proxy::types::JDouble >& object):
  ::org::jace::proxy::types::JDouble(static_cast<jvalue>(object)), fieldID(object.fieldID)
{
  if (object.parent)
  {
    JNIEnv* env = attach();
    parent = newGlobalRef(env, object.parent); 
  }
  else
    parent = 0;

  if (object.parentClass)
  {
    JNIEnv* env = attach();
    parentClass = static_cast<jclass>(newGlobalRef(env, object.parentClass));
  }
  else
    parentClass = 0;
}

template <> inline
jace::proxy::types::JDouble& JFieldProxy< ::org::jace::proxy::types::JDouble >::operator=(const ::org::jace::proxy::types::JDouble& type)
{
  JNIEnv* env = attach();
  jvalue value = static_cast<jvalue>(type);
  setJavaJniValue(value);

  // If we don't have a parent object, we are a static field member.
  if (!parent)
  {
    jclass fieldClass = parentClass;
    env->SetStaticDoubleField(fieldClass, fieldID, type);
  }
  // Otherwise, we are an instance member.
  else
    env->SetDoubleField(parent, fieldID, type);

  return *this;
}


END_NAMESPACE_2(org, jace)
